{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/fso/part-1/part1/src/App.js\";\n// // // import React from 'react'\n// // // import ReactDOM from 'react-dom'\n\nimport { useState } from \"react\";\n\n// // // const Header = (props) => {\n// // //   return (\n// // //     <h1>{props.course}</h1>\n// // //   )\n// // // }\n\n// // // const Part = (props) => {\n// // //   return (\n// // //     <p>\n// // //       {props.part} {props.exercises}\n// // //     </p>\n// // //   )\n// // // }\n\n// // // const Content = (props) => {\n// // //   return (\n// // //     <div>\n// // //       <Part part={props.parts[0].name} exercises={props.parts[0].exercises}/>\n// // //       <Part part={props.parts[1].name} exercises={props.parts[1].exercises}/>\n// // //       <Part part={props.parts[2].name} exercises={props.parts[2].exercises}/>\n// // //     </div>\n// // //   )\n// // // }\n\n// // // const Total = (props) => {\n// // //   return (\n// // //     <p>Number of exercises {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}</p>\n// // //   )\n// // // }\n\n// // // const App = () => {\n// // //   const course = {\n// // //     name: 'Half Stack application development',\n// // //     parts: [\n// // //       {\n// // //         name: 'Fundamentals of React',\n// // //         exercises: 10\n// // //       },\n// // //       {\n// // //         name: 'Using props to pass data',\n// // //         exercises: 7\n// // //       },\n// // //       {\n// // //         name: 'State of a component',\n// // //         exercises: 14\n// // //       }\n// // //     ]\n// // //   }\n\n// // //   return (\n// // //     <div>\n// // //       <Header course={course.name} />\n// // //       <Content parts={course.parts}/>\n// // //       <Total parts={course.parts} />\n// // //     </div>\n// // //   )\n// // // }\n\n// // import { useState } from \"react\"\n\n// // const Display = props => <div>{props.value}</div>\n\n// // const Button = (props) => {\n// //   return (\n// //     <button onClick={props.handleClick}>\n// //     {props.text}\n// //   </button>\n// //   )\n// // }\n\n// // const App = () => {\n// //   const [value, setValue] = useState(10)\n\n// //   const setToValue = (newValue) => {\n// //     console.log('value now', newValue)\n// //     setValue(newValue)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Display value={value} />\n// //       <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n// //       <Button handleClick={() => setToValue(0)} text=\"reset\" />\n// //       <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n// //     </div>\n// //   )\n// // }\n\n// // const Title = (props) => {\n// //   return (\n// //     <h1>\n// //       {props.text}\n// //     </h1>\n// //   )\n// // }\n\n// // const Button = ({ text, handleClick }) => {\n// //   return (\n// //     <button onClick={handleClick}>\n// //       {text}\n// //     </button>\n// //   )\n// // }\n\n// // const Score = ({ text, value }) => {\n// //   return (\n// //     <div>\n// //       {text} {value}\n// //     </div>\n// //   )\n// // }\n\n// // const Statistics = ({ good, bad, neutral }) => {\n\n// //   const all = good + bad + neutral\n\n// //   return (\n// //     <>\n// //       <div>average: {(good - bad) / all}</div>\n// //       <div>positive: {(good / 9) * 100}%</div>\n// //     </>\n// //   )\n// // }\n\n// // const App = () => {\n// //   // save clicks of each button to its own state\n// //   const [good, setGood] = useState(0)\n// //   const [neutral, setNeutral] = useState(0)\n// //   const [bad, setBad] = useState(0)\n\n// //   const all = good + bad + neutral\n\n// //   if (good > 0 || bad > 0 || neutral > 0) {\n// //     return (\n// //       <>\n// //         <Title text='give feedback' />\n\n// //         <Button text='good' handleClick={() => setGood(good + 1)} />\n// //         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n// //         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n// //         <Title text='statistics' />\n// //         <Score text='good' value={good} />\n// //         <Score text='neutral' value={neutral} />\n// //         <Score text='bad' value={bad} />\n// //         <div>all: {all}</div>\n// //         <Statistics good={good} bad={bad} neutral={neutral} />\n// //       </>\n// //     )\n// //   } else {\n// //     return (\n// //       <div>\n\n// //         <Title text='give feedback' />\n\n// //         <Button text='good' handleClick={() => setGood(good + 1)} />\n// //         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n// //         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n// //         <Title text='statistics' />\n// //         <p>No feedback given</p>\n// //       </div>\n// //     )\n// //   }\n// // }\n\n// import { useState } from \"react\";\n\n// function App() {\n//   const anecdotes = [\n//     \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\",\n//     \"You cannot teach beginners top-down programming, because they don't know which end is up.\",\n//     \"Inside every large program, there is a small program trying to get out.\",\n//     \"Why do we never have time to do it right, but always have time to do it over?.\",\n//     \"Good judgment comes from experience, and experience comes from bad judgment.\",\n//     \"I have always found that plans are useless, but planning is indispensable.\",\n//     \"Always code as if the person who ends up maintaining your code will be a violent psychopath who knows where you live.\",\n//     \"Every big computing disaster has come from taking too many ideas and putting them in one place.\",\n//   ];\n\n//   const [selected, setSelected] = useState(0);\n//   const [votes, setVotes] = useState([0, 0, 0, 0, 0, 0, 0, 0]);\n\n//   let number = Math.floor(Math.random() * anecdotes.length);\n\n//   const votesCopy = [...votes];\n\n//   const handleClick = () => {\n//     setSelected(number);\n//   };\n\n//   const handleVote = () => {\n//     votesCopy[selected]++;\n//     setVotes(votesCopy);\n//   };\n\n//   let highestVote = votesCopy.reduce((acc, curr) => Math.max(acc, curr));\n//   let indexOfHighestVote = votesCopy.indexOf(highestVote);\n\n//   console.log(selected, \"selected\");\n//   console.log(highestVote, \"highestVote\");\n//   console.log(votesCopy, votes);\n//   console.log(indexOfHighestVote, \"indexOfHighestVote\");\n\n//   return (\n//     <div>\n//       <h1>Anecdote of the day</h1>\n//       {anecdotes[selected]}\n//       <div>\n//         <button onClick={handleVote}>vote</button>\n//         <button onClick={handleClick}>next anecdote</button>\n//       </div>\n//       <h2>Anecdote with most votes</h2>\n//       <p>\n//         {highestVote === 0\n//           ? anecdotes[selected]\n//           : anecdotes[indexOfHighestVote]}\n//       </p>\n//       <p>{highestVote}</p>\n//     </div>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const course = {\n    id: 1,\n    name: 'Half Stack application development',\n    parts: [{\n      name: 'Fundamentals of React',\n      exercises: 10,\n      id: 1\n    }, {\n      name: 'Using props to pass data',\n      exercises: 7,\n      id: 2\n    }, {\n      name: 'State of a component',\n      exercises: 14,\n      id: 3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Course, {\n    course: course\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 10\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","course","id","name","parts","exercises","Course","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/fso/part-1/part1/src/App.js"],"sourcesContent":["// // // import React from 'react'\n// // // import ReactDOM from 'react-dom'\n\nimport { useState } from \"react\"\n\n// // // const Header = (props) => {\n// // //   return (\n// // //     <h1>{props.course}</h1>\n// // //   )\n// // // }\n\n// // // const Part = (props) => {\n// // //   return (\n// // //     <p>\n// // //       {props.part} {props.exercises}\n// // //     </p>\n// // //   )\n// // // }\n\n// // // const Content = (props) => {\n// // //   return (\n// // //     <div>\n// // //       <Part part={props.parts[0].name} exercises={props.parts[0].exercises}/>\n// // //       <Part part={props.parts[1].name} exercises={props.parts[1].exercises}/>\n// // //       <Part part={props.parts[2].name} exercises={props.parts[2].exercises}/>\n// // //     </div>\n// // //   )\n// // // }\n\n// // // const Total = (props) => {\n// // //   return (\n// // //     <p>Number of exercises {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}</p>\n// // //   )\n// // // }\n\n// // // const App = () => {\n// // //   const course = {\n// // //     name: 'Half Stack application development',\n// // //     parts: [\n// // //       {\n// // //         name: 'Fundamentals of React',\n// // //         exercises: 10\n// // //       },\n// // //       {\n// // //         name: 'Using props to pass data',\n// // //         exercises: 7\n// // //       },\n// // //       {\n// // //         name: 'State of a component',\n// // //         exercises: 14\n// // //       }\n// // //     ]\n// // //   }\n\n// // //   return (\n// // //     <div>\n// // //       <Header course={course.name} />\n// // //       <Content parts={course.parts}/>\n// // //       <Total parts={course.parts} />\n// // //     </div>\n// // //   )\n// // // }\n\n// // import { useState } from \"react\"\n\n\n\n// // const Display = props => <div>{props.value}</div>\n\n\n// // const Button = (props) => {\n// //   return (\n// //     <button onClick={props.handleClick}>\n// //     {props.text}\n// //   </button>\n// //   )\n// // }\n\n\n\n// // const App = () => {\n// //   const [value, setValue] = useState(10)\n\n// //   const setToValue = (newValue) => {\n// //     console.log('value now', newValue)\n// //     setValue(newValue)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Display value={value} />\n// //       <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n// //       <Button handleClick={() => setToValue(0)} text=\"reset\" />\n// //       <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n// //     </div>\n// //   )\n// // }\n\n\n\n\n\n// // const Title = (props) => {\n// //   return (\n// //     <h1>\n// //       {props.text}\n// //     </h1>\n// //   )\n// // }\n\n\n// // const Button = ({ text, handleClick }) => {\n// //   return (\n// //     <button onClick={handleClick}>\n// //       {text}\n// //     </button>\n// //   )\n// // }\n\n// // const Score = ({ text, value }) => {\n// //   return (\n// //     <div>\n// //       {text} {value}\n// //     </div>\n// //   )\n// // }\n\n// // const Statistics = ({ good, bad, neutral }) => {\n\n// //   const all = good + bad + neutral\n\n// //   return (\n// //     <>\n// //       <div>average: {(good - bad) / all}</div>\n// //       <div>positive: {(good / 9) * 100}%</div>\n// //     </>\n// //   )\n// // }\n\n// // const App = () => {\n// //   // save clicks of each button to its own state\n// //   const [good, setGood] = useState(0)\n// //   const [neutral, setNeutral] = useState(0)\n// //   const [bad, setBad] = useState(0)\n\n// //   const all = good + bad + neutral\n\n// //   if (good > 0 || bad > 0 || neutral > 0) {\n// //     return (\n// //       <>\n// //         <Title text='give feedback' />\n\n// //         <Button text='good' handleClick={() => setGood(good + 1)} />\n// //         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n// //         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n// //         <Title text='statistics' />\n// //         <Score text='good' value={good} />\n// //         <Score text='neutral' value={neutral} />\n// //         <Score text='bad' value={bad} />\n// //         <div>all: {all}</div>\n// //         <Statistics good={good} bad={bad} neutral={neutral} />\n// //       </>\n// //     )\n// //   } else {\n// //     return (\n// //       <div>\n\n// //         <Title text='give feedback' />\n\n// //         <Button text='good' handleClick={() => setGood(good + 1)} />\n// //         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n// //         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n// //         <Title text='statistics' />\n// //         <p>No feedback given</p>\n// //       </div>\n// //     )\n// //   }\n// // }\n\n\n// import { useState } from \"react\";\n\n// function App() {\n//   const anecdotes = [\n//     \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\",\n//     \"You cannot teach beginners top-down programming, because they don't know which end is up.\",\n//     \"Inside every large program, there is a small program trying to get out.\",\n//     \"Why do we never have time to do it right, but always have time to do it over?.\",\n//     \"Good judgment comes from experience, and experience comes from bad judgment.\",\n//     \"I have always found that plans are useless, but planning is indispensable.\",\n//     \"Always code as if the person who ends up maintaining your code will be a violent psychopath who knows where you live.\",\n//     \"Every big computing disaster has come from taking too many ideas and putting them in one place.\",\n//   ];\n\n//   const [selected, setSelected] = useState(0);\n//   const [votes, setVotes] = useState([0, 0, 0, 0, 0, 0, 0, 0]);\n\n//   let number = Math.floor(Math.random() * anecdotes.length);\n\n//   const votesCopy = [...votes];\n\n//   const handleClick = () => {\n//     setSelected(number);\n//   };\n\n//   const handleVote = () => {\n//     votesCopy[selected]++;\n//     setVotes(votesCopy);\n//   };\n\n//   let highestVote = votesCopy.reduce((acc, curr) => Math.max(acc, curr));\n//   let indexOfHighestVote = votesCopy.indexOf(highestVote);\n\n//   console.log(selected, \"selected\");\n//   console.log(highestVote, \"highestVote\");\n//   console.log(votesCopy, votes);\n//   console.log(indexOfHighestVote, \"indexOfHighestVote\");\n\n//   return (\n//     <div>\n//       <h1>Anecdote of the day</h1>\n//       {anecdotes[selected]}\n//       <div>\n//         <button onClick={handleVote}>vote</button>\n//         <button onClick={handleClick}>next anecdote</button>\n//       </div>\n//       <h2>Anecdote with most votes</h2>\n//       <p>\n//         {highestVote === 0\n//           ? anecdotes[selected]\n//           : anecdotes[indexOfHighestVote]}\n//       </p>\n//       <p>{highestVote}</p>\n//     </div>\n//   );\n// }\n\nconst App = () => {\n  const course = {\n    id: 1,\n    name: 'Half Stack application development',\n    parts: [\n      {\n        name: 'Fundamentals of React',\n        exercises: 10,\n        id: 1\n      },\n      {\n        name: 'Using props to pass data',\n        exercises: 7,\n        id: 2\n      },\n      {\n        name: 'State of a component',\n        exercises: 14,\n        id: 3\n      }\n    ]\n  }\n\n  return <Course course={course} />\n}\n\n\n\n\nexport default App"],"mappings":";AAAA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,MAAM,GAAG;IACbC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,oCAAoC;IAC1CC,KAAK,EAAE,CACL;MACED,IAAI,EAAE,uBAAuB;MAC7BE,SAAS,EAAE,EAAE;MACbH,EAAE,EAAE;IACN,CAAC,EACD;MACEC,IAAI,EAAE,0BAA0B;MAChCE,SAAS,EAAE,CAAC;MACZH,EAAE,EAAE;IACN,CAAC,EACD;MACEC,IAAI,EAAE,sBAAsB;MAC5BE,SAAS,EAAE,EAAE;MACbH,EAAE,EAAE;IACN,CAAC;EAEL,CAAC;EAED,oBAAOH,OAAA,CAACO,MAAM;IAACL,MAAM,EAAEA;EAAO;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAAAC,EAAA,GAxBKX,GAAG;AA6BT,eAAeA,GAAG;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}