{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/fso/part-1/part1/src/App.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\n// // import ReactDOM from 'react-dom'\n\n// // const Header = (props) => {\n// //   return (\n// //     <h1>{props.course}</h1>\n// //   )\n// // }\n\n// // const Part = (props) => {\n// //   return (\n// //     <p>\n// //       {props.part} {props.exercises}\n// //     </p>\n// //   )\n// // }\n\n// // const Content = (props) => {\n// //   return (\n// //     <div>\n// //       <Part part={props.parts[0].name} exercises={props.parts[0].exercises}/>\n// //       <Part part={props.parts[1].name} exercises={props.parts[1].exercises}/>\n// //       <Part part={props.parts[2].name} exercises={props.parts[2].exercises}/>\n// //     </div>\n// //   )\n// // }\n\n// // const Total = (props) => {\n// //   return (\n// //     <p>Number of exercises {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}</p>\n// //   )\n// // }\n\n// // const App = () => {\n// //   const course = {\n// //     name: 'Half Stack application development',\n// //     parts: [\n// //       {\n// //         name: 'Fundamentals of React',\n// //         exercises: 10\n// //       },\n// //       {\n// //         name: 'Using props to pass data',\n// //         exercises: 7\n// //       },\n// //       {\n// //         name: 'State of a component',\n// //         exercises: 14\n// //       }\n// //     ]\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Header course={course.name} />\n// //       <Content parts={course.parts}/>\n// //       <Total parts={course.parts} />\n// //     </div>\n// //   )\n// // }\n\n// import { useState } from \"react\"\n\n// const Display = props => <div>{props.value}</div>\n\n// const Button = (props) => {\n//   return (\n//     <button onClick={props.handleClick}>\n//     {props.text}\n//   </button>\n//   )\n// }\n\n// const App = () => {\n//   const [value, setValue] = useState(10)\n\n//   const setToValue = (newValue) => {\n//     console.log('value now', newValue)\n//     setValue(newValue)\n//   }\n\n//   return (\n//     <div>\n//       <Display value={value} />\n//       <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n//       <Button handleClick={() => setToValue(0)} text=\"reset\" />\n//       <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n//     </div>\n//   )\n// }\n\n// const Title = (props) => {\n//   return (\n//     <h1>\n//       {props.text}\n//     </h1>\n//   )\n// }\n\n// const Button = ({ text, handleClick }) => {\n//   return (\n//     <button onClick={handleClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n// const Score = ({ text, value }) => {\n//   return (\n//     <div>\n//       {text} {value}\n//     </div>\n//   )\n// }\n\n// const Statistics = ({ good, bad, neutral }) => {\n\n//   const all = good + bad + neutral\n\n//   return (\n//     <>\n//       <div>average: {(good - bad) / all}</div>\n//       <div>positive: {(good / 9) * 100}%</div>\n//     </>\n//   )\n// }\n\n// const App = () => {\n//   // save clicks of each button to its own state\n//   const [good, setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n\n//   const all = good + bad + neutral\n\n//   if (good > 0 || bad > 0 || neutral > 0) {\n//     return (\n//       <>\n//         <Title text='give feedback' />\n\n//         <Button text='good' handleClick={() => setGood(good + 1)} />\n//         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n//         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n//         <Title text='statistics' />\n//         <Score text='good' value={good} />\n//         <Score text='neutral' value={neutral} />\n//         <Score text='bad' value={bad} />\n//         <div>all: {all}</div>\n//         <Statistics good={good} bad={bad} neutral={neutral} />\n//       </>\n//     )\n//   } else {\n//     return (\n//       <div>\n\n//         <Title text='give feedback' />\n\n//         <Button text='good' handleClick={() => setGood(good + 1)} />\n//         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n//         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n//         <Title text='statistics' />\n//         <p>No feedback given</p>\n//       </div>\n//     )\n//   }\n// }\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = _ref => {\n  let {\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 30\n  }, this);\n};\n_c = Header;\nconst Button = _ref2 => {\n  let {\n    onClick,\n    text\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 39\n  }, this);\n};\n_c2 = Button;\nconst Anecdote = _ref3 => {\n  let {\n    anecdote\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: anecdote\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 36\n  }, this);\n};\n_c3 = Anecdote;\nconst Votes = _ref4 => {\n  let {\n    votes\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"has \", votes, \" votes\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 30\n  }, this);\n};\n_c4 = Votes;\nconst App = _ref5 => {\n  _s();\n  let {\n    anecdotes\n  } = _ref5;\n  const [selected, setSelected] = useState(0);\n  // fill an an array with the length of the anecdotes array with zeros\n  const [votes, setVotes] = useState(new Array(anecdotes.length).fill(0));\n\n  // grab a random anecdote\n  const randomAnecdote = () => {\n    let randomNumber = Math.floor(Math.random() * Math.floor(anecdotes.length));\n    setSelected(randomNumber);\n  };\n  const voteForAnecdote = () => {\n    const copy = [...votes];\n    copy[selected] += 1;\n    setVotes(copy);\n  };\n\n  // find the highest value in the array of votes\n  const highestVotes = Math.max(...votes);\n  // set a value with the correct anecdote based on the index of the value with the most votes\n  const winningAnecdote = anecdotes[votes.indexOf(highestVotes)];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"Anecdote of the day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Anecdote, {\n      anecdote: anecdotes[selected]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Votes, {\n      votes: votes[selected]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: voteForAnecdote,\n      text: \"vote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: randomAnecdote,\n      text: \"next anecdote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"Anecdote with most votes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Anecdote, {\n      anecdote: winningAnecdote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Votes, {\n      votes: highestVotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4UjhN1VgRMG8y6dlwyp5RuBH7dk=\");\n_c5 = App;\nconst anecdotes = [\"If it hurts, do it more often\", \"Adding manpower to a late software project makes it later!\", \"The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.\", \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\", \"Premature optimization is the root of all evil.\", \"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the coed as cleverly as possibly, you are, by definition, not smart enough to debug it.\"];\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Anecdote\");\n$RefreshReg$(_c4, \"Votes\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Header","_ref","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Button","_ref2","onClick","_c2","Anecdote","_ref3","anecdote","_c3","Votes","_ref4","votes","_c4","App","_ref5","_s","anecdotes","selected","setSelected","setVotes","Array","length","fill","randomAnecdote","randomNumber","Math","floor","random","voteForAnecdote","copy","highestVotes","max","winningAnecdote","indexOf","_c5","$RefreshReg$"],"sources":["/Users/user/Desktop/fso/part-1/part1/src/App.js"],"sourcesContent":["// // import React from 'react'\n// // import ReactDOM from 'react-dom'\n\n// // const Header = (props) => {\n// //   return (\n// //     <h1>{props.course}</h1>\n// //   )\n// // }\n\n// // const Part = (props) => {\n// //   return (\n// //     <p>\n// //       {props.part} {props.exercises}\n// //     </p>\n// //   )\n// // }\n\n// // const Content = (props) => {\n// //   return (\n// //     <div>\n// //       <Part part={props.parts[0].name} exercises={props.parts[0].exercises}/>\n// //       <Part part={props.parts[1].name} exercises={props.parts[1].exercises}/>\n// //       <Part part={props.parts[2].name} exercises={props.parts[2].exercises}/>\n// //     </div>\n// //   )\n// // }\n\n// // const Total = (props) => {\n// //   return (\n// //     <p>Number of exercises {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}</p>\n// //   )\n// // }\n\n// // const App = () => {\n// //   const course = {\n// //     name: 'Half Stack application development',\n// //     parts: [\n// //       {\n// //         name: 'Fundamentals of React',\n// //         exercises: 10\n// //       },\n// //       {\n// //         name: 'Using props to pass data',\n// //         exercises: 7\n// //       },\n// //       {\n// //         name: 'State of a component',\n// //         exercises: 14\n// //       }\n// //     ]\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Header course={course.name} />\n// //       <Content parts={course.parts}/>\n// //       <Total parts={course.parts} />\n// //     </div>\n// //   )\n// // }\n\n// import { useState } from \"react\"\n\n\n\n// const Display = props => <div>{props.value}</div>\n\n\n// const Button = (props) => {\n//   return (\n//     <button onClick={props.handleClick}>\n//     {props.text}\n//   </button>\n//   )\n// }\n\n\n\n// const App = () => {\n//   const [value, setValue] = useState(10)\n\n//   const setToValue = (newValue) => {\n//     console.log('value now', newValue)\n//     setValue(newValue)\n//   }\n\n//   return (\n//     <div>\n//       <Display value={value} />\n//       <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n//       <Button handleClick={() => setToValue(0)} text=\"reset\" />\n//       <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n//     </div>\n//   )\n// }\n\n\n\n\n\n// const Title = (props) => {\n//   return (\n//     <h1>\n//       {props.text}\n//     </h1>\n//   )\n// }\n\n\n// const Button = ({ text, handleClick }) => {\n//   return (\n//     <button onClick={handleClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n// const Score = ({ text, value }) => {\n//   return (\n//     <div>\n//       {text} {value}\n//     </div>\n//   )\n// }\n\n// const Statistics = ({ good, bad, neutral }) => {\n\n//   const all = good + bad + neutral\n\n//   return (\n//     <>\n//       <div>average: {(good - bad) / all}</div>\n//       <div>positive: {(good / 9) * 100}%</div>\n//     </>\n//   )\n// }\n\n// const App = () => {\n//   // save clicks of each button to its own state\n//   const [good, setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n\n//   const all = good + bad + neutral\n\n//   if (good > 0 || bad > 0 || neutral > 0) {\n//     return (\n//       <>\n//         <Title text='give feedback' />\n\n//         <Button text='good' handleClick={() => setGood(good + 1)} />\n//         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n//         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n//         <Title text='statistics' />\n//         <Score text='good' value={good} />\n//         <Score text='neutral' value={neutral} />\n//         <Score text='bad' value={bad} />\n//         <div>all: {all}</div>\n//         <Statistics good={good} bad={bad} neutral={neutral} />\n//       </>\n//     )\n//   } else {\n//     return (\n//       <div>\n\n//         <Title text='give feedback' />\n\n//         <Button text='good' handleClick={() => setGood(good + 1)} />\n//         <Button text='neutral' handleClick={() => setNeutral(neutral + 1)} />\n//         <Button text='bad' handleClick={() => setBad(bad + 1)} />\n\n//         <Title text='statistics' />\n//         <p>No feedback given</p>\n//       </div>\n//     )\n//   }\n// }\n\n\nimport { useState } from \"react\";\n\nconst Header = ({ text }) => <h1>{text}</h1>;\nconst Button = ({ onClick, text }) => <button onClick={onClick}>{text}</button>;\nconst Anecdote = ({ anecdote }) => <p>{anecdote}</p>;\nconst Votes = ({ votes }) => <p>has {votes} votes</p>;\n\nconst App = ({ anecdotes }) => {\n  const [selected, setSelected] = useState(0);\n  // fill an an array with the length of the anecdotes array with zeros\n  const [votes, setVotes] = useState(new Array(anecdotes.length).fill(0));\n\n  // grab a random anecdote\n  const randomAnecdote = () => {\n    let randomNumber = Math.floor(Math.random() * Math.floor(anecdotes.length));\n    setSelected(randomNumber);\n  };\n\n  const voteForAnecdote = () => {\n    const copy = [...votes];\n    copy[selected] += 1;\n    setVotes(copy);\n  };\n\n  // find the highest value in the array of votes\n  const highestVotes = Math.max(...votes);\n  // set a value with the correct anecdote based on the index of the value with the most votes\n  const winningAnecdote = anecdotes[votes.indexOf(highestVotes)];\n\n  return (\n    <div>\n      <Header text=\"Anecdote of the day\" />\n      <Anecdote anecdote={anecdotes[selected]} />\n      <Votes votes={votes[selected]} />\n      <Button onClick={voteForAnecdote} text=\"vote\" />\n      <Button onClick={randomAnecdote} text=\"next anecdote\" />\n      <Header text=\"Anecdote with most votes\" />\n      <Anecdote anecdote={winningAnecdote} />\n      <Votes votes={highestVotes} />\n    </div>\n  );\n};\n\nconst anecdotes = [\n  \"If it hurts, do it more often\",\n  \"Adding manpower to a late software project makes it later!\",\n  \"The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.\",\n  \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\",\n  \"Premature optimization is the root of all evil.\",\n  \"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the coed as cleverly as possibly, you are, by definition, not smart enough to debug it.\"\n];\n\nexport default App\n\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,MAAM,GAAGC,IAAA;EAAA,IAAC;IAAEC;EAAK,CAAC,GAAAD,IAAA;EAAA,oBAAKF,OAAA;IAAAI,QAAA,EAAKD;EAAI;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAAA;AAACC,EAAA,GAAvCR,MAAM;AACZ,MAAMS,MAAM,GAAGC,KAAA;EAAA,IAAC;IAAEC,OAAO;IAAET;EAAK,CAAC,GAAAQ,KAAA;EAAA,oBAAKX,OAAA;IAAQY,OAAO,EAAEA,OAAQ;IAAAR,QAAA,EAAED;EAAI;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAAA;AAACK,GAAA,GAA1EH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"},"metadata":{},"sourceType":"module","externalDependencies":[]}